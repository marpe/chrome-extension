---
import {getStoredEntries, isUserScriptsAvailable, logMessage, registerEntry, unregisterEntry} from "../lib/common";
---
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Stylizr</title>
    <link rel="stylesheet"
          href="/style.css">
    <style>
        .centered {
            min-width: 400px;
            min-height: 400px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .enabled {
            background-color: #277a27;
            border: 1px solid #3ba93b;
            color: #000;
        }
    </style>
  </head>
  <body class="centered">
    <div id="message"></div>
    <button class="toggle"
            style="min-width: 200px;">Insert
    </button>
    <!--    <button class="insert">Insert</button>-->
    <!--    <button class="remove">Remove</button>-->
  </body>
</html>

<script>
  import {
    getStoredEntries,
    isUserScriptsAvailable,
    logMessage, registerEntry,
    unregisterEntry,
  } from "../lib/common";

  export {};

  let isEnabled = false;

  async function getCurrentTab() {
    const [currentTab] = await chrome.tabs.query({
      active: true,
      currentWindow: true,
    });
    return currentTab;
  }

  const message = document.querySelector("#message") as HTMLDivElement;
  // const insertButton = document.querySelector(".insert") as HTMLButtonElement;
  // const removeButton = document.querySelector(".remove") as HTMLButtonElement;
  const toggleButton = document.querySelector(".toggle") as HTMLButtonElement;

  async function updateUi() {
    if (!isUserScriptsAvailable()) {
      message.textContent = "User scripts are not available";
      return;
    }
  }

  async function handleClick() {
    isEnabled = !isEnabled;

    const entries = await getStoredEntries();

    for (const [id, entry] of Object.entries(entries)) {
      /*if (!currentUrl.match(matches)) {
        continue;
      }*/

      try {
        const currentTab = await getCurrentTab();
        if (!currentTab?.id) {
          await logMessage("No tab found", {entry});
          continue;
        }
        if (!isEnabled) {
          await unregisterEntry(id, currentTab.id);
          await chrome.action.setBadgeText({text: "OFF"});
          await logMessage("Unregistered entry", entry);
        } else {
          await registerEntry(id, currentTab.id);
          await chrome.action.setBadgeText({text: "ON"});
          await logMessage("Registered entry", entry);
        }
      } catch (error) {
        console.error(error);
        await chrome.action.setBadgeText({text: "ERROR"});
        await logMessage("An error occurred when registering/unregistering an entry", {error, entry});
      } finally {
      }
    }

    toggleButton.textContent = isEnabled ? "Disable" : "Enable";
    toggleButton.classList.toggle("enabled", isEnabled);
  }

  toggleButton.addEventListener("click", handleClick);

  // insertButton.addEventListener("click", () => handleClick(true));
  // removeButton.addEventListener("click", () => handleClick(false));

  await updateUi();
</script>

